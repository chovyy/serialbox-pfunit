MODULE serialbox_test
   
  USE ISO_FORTRAN_ENV
  USE pfunit_mod
  USE m_serialize
  
  IMPLICIT NONE
  
  PUBLIC 

  TYPE(t_savepoint)  :: savepoint
  
  CHARACTER(len=*), PARAMETER :: dir = 'sbdata'
  CHARACTER(len=*), PARAMETER :: savepoint_name = 'test'

CONTAINS

@Before
   SUBROUTINE mySetup()

      CALL fs_create_savepoint(savepoint_name, savepoint)
      
   END SUBROUTINE mySetup
   
@After
   SUBROUTINE myTearDown()

      CALL fs_destroy_savepoint(savepoint)
      
   END SUBROUTINE myTearDown
   
@Test
    SUBROUTINE testIntegerArrays()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i1(5), w_testfield_i2(4,3), w_testfield_i3(3,2,2), w_testfield_i4(2,2,2,2)
      INTEGER :: r_testfield_i1(5), r_testfield_i2(4,3), r_testfield_i3(3,2,2), r_testfield_i4(2,2,2,2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_integer'
      
      w_testfield_i1 = (/ 0, 1, 2, 3, 4 /)
      w_testfield_i2 = RESHAPE((/ 0, 3, 2, 9, 1, 4, 7, 10, 2, 5, 8, 11 /), SHAPE(w_testfield_i2))
      w_testfield_i3 = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i3))
      w_testfield_i4 = RESHAPE((/ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 /), SHAPE(w_testfield_i4))
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i1", w_testfield_i1)
      CALL fs_write_field(serializer, savepoint, "testfield_i2", w_testfield_i2)
      CALL fs_write_field(serializer, savepoint, "testfield_i3", w_testfield_i3)
      CALL fs_write_field(serializer, savepoint, "testfield_i4", w_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i1"))
      @assertTrue(fs_field_exists(serializer, "testfield_i2"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4"))
      CALL fs_read_field(serializer, savepoint, "testfield_i1", r_testfield_i1)
      CALL fs_read_field(serializer, savepoint, "testfield_i2", r_testfield_i2)
      CALL fs_read_field(serializer, savepoint, "testfield_i3", r_testfield_i3)
      CALL fs_read_field(serializer, savepoint, "testfield_i4", r_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i1, r_testfield_i1)
      @assertEqual(w_testfield_i2, r_testfield_i2)
      @assertEqual(w_testfield_i3, r_testfield_i3)
      @assertEqual(w_testfield_i4, r_testfield_i4)
    
    END SUBROUTINE testIntegerArrays
   
@Test
    SUBROUTINE testScalars()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i0, r_testfield_i0
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_scalars'
      
      w_testfield_i0 = 42
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i0", w_testfield_i0)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i0"))
      CALL fs_read_field(serializer, savepoint, "testfield_i0", r_testfield_i0)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i0, r_testfield_i0)
    
    END SUBROUTINE testScalars
   
@Test
    SUBROUTINE testRank()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i3(3,1,4), r_testfield_i3(3,1,4), w_testfield_i3_size(4), w_testfield_i3_bounds(4, 2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank'
      
      w_testfield_i3 = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3))
      w_testfield_i3_size = (/ 3, 1, 4, 1 /)
      w_testfield_i3_bounds = RESHAPE((/ 1, 1, 1, 0, 3, 1, 4, 0 /), SHAPE(w_testfield_i3_bounds))
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i3_rank", w_testfield_i3)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i3_rank"))
      @assertEqual(w_testfield_i3_size, fs_get_field_size(serializer, "testfield_i3_rank"))
      @assertEqual(w_testfield_i3_bounds, fs_get_field_bounds(serializer, "testfield_i3_rank"))
      CALL fs_read_field(serializer, savepoint, "testfield_i3", r_testfield_i3)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i3, r_testfield_i3)
    
    END SUBROUTINE testRank

END MODULE serialbox_test


