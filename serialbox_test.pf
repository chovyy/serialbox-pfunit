MODULE serialbox_test
   
  USE ISO_FORTRAN_ENV
  USE pfunit_mod
  USE m_serialize
  
  IMPLICIT NONE
  
  PUBLIC 

  TYPE(t_savepoint)  :: savepoint
  
  CHARACTER(len=*), PARAMETER :: dir = 'sbdata'
  CHARACTER(len=*), PARAMETER :: savepoint_name = 'test'

CONTAINS

@Before
   SUBROUTINE mySetup()

      CALL fs_create_savepoint(savepoint_name, savepoint)
      
   END SUBROUTINE mySetup
   
@After
   SUBROUTINE myTearDown()

      CALL fs_destroy_savepoint(savepoint)
      
   END SUBROUTINE myTearDown
   
@Test
    SUBROUTINE testIntegerArrays()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i1(5), w_testfield_i2(4,3), w_testfield_i3(3,2,2), w_testfield_i4(2,2,2,2)
      INTEGER :: r_testfield_i1(5), r_testfield_i2(4,3), r_testfield_i3(3,2,2), r_testfield_i4(2,2,2,2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_integer'
      
      w_testfield_i1 = (/ 0, 1, 2, 3, 4 /)
      w_testfield_i2 = RESHAPE((/ 0, 3, 2, 9, 1, 4, 7, 10, 2, 5, 8, 11 /), SHAPE(w_testfield_i2))
      w_testfield_i3 = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i3))
      w_testfield_i4 = RESHAPE((/ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 /), SHAPE(w_testfield_i4))
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i1", w_testfield_i1)
      CALL fs_write_field(serializer, savepoint, "testfield_i2", w_testfield_i2)
      CALL fs_write_field(serializer, savepoint, "testfield_i3", w_testfield_i3)
      CALL fs_write_field(serializer, savepoint, "testfield_i4", w_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i1"))
      @assertTrue(fs_field_exists(serializer, "testfield_i2"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4"))
      CALL fs_read_field(serializer, savepoint, "testfield_i1", r_testfield_i1)
      CALL fs_read_field(serializer, savepoint, "testfield_i2", r_testfield_i2)
      CALL fs_read_field(serializer, savepoint, "testfield_i3", r_testfield_i3)
      CALL fs_read_field(serializer, savepoint, "testfield_i4", r_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i1, r_testfield_i1)
      @assertEqual(w_testfield_i2, r_testfield_i2)
      @assertEqual(w_testfield_i3, r_testfield_i3)
      @assertEqual(w_testfield_i4, r_testfield_i4)
    
    END SUBROUTINE testIntegerArrays
   
@Test
    SUBROUTINE testScalars()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i0, r_testfield_i0
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_scalars'
      
      w_testfield_i0 = 42
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i0", w_testfield_i0)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i0"))
      CALL fs_read_field(serializer, savepoint, "testfield_i0", r_testfield_i0)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i0, r_testfield_i0)
    
    END SUBROUTINE testScalars
   
@Test
    SUBROUTINE testRank_i3()
    
      TYPE(t_serializer) :: serializer
      
      INTEGER :: w_testfield_i3a(3,1,4), r_testfield_i3a(3,1,4), w_testfield_i3a_size(3), w_testfield_i3a_bounds(3, 2)
      INTEGER :: w_testfield_i3b(3,4,1), r_testfield_i3b(3,4,1), w_testfield_i3b_size(3), w_testfield_i3b_bounds(3, 2)
      INTEGER :: w_testfield_i3c(3,1,1), r_testfield_i3c(3,1,1), w_testfield_i3c_size(3), w_testfield_i3c_bounds(3, 2)
      INTEGER :: w_testfield_i3d(1,1,1), r_testfield_i3d(1,1,1), w_testfield_i3d_size(3), w_testfield_i3d_bounds(3, 2)
      INTEGER :: w_testfield_i3e(1,1,3), r_testfield_i3e(1,1,3), w_testfield_i3e_size(3), w_testfield_i3e_bounds(3, 2)
      INTEGER :: w_testfield_i3f(1,4,3), r_testfield_i3f(1,4,3), w_testfield_i3f_size(3), w_testfield_i3f_bounds(3, 2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank'
      
      w_testfield_i3a = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3a))
      w_testfield_i3a_size = (/ 3, 1, 4 /)
      w_testfield_i3a_bounds = RESHAPE((/ 1, 1, 1, 3, 1, 4 /), SHAPE(w_testfield_i3a_bounds))
      
      w_testfield_i3b = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3b))
      w_testfield_i3b_size = (/ 3, 4, 1 /)
      w_testfield_i3b_bounds = RESHAPE((/ 1, 1, 1, 3, 4, 1 /), SHAPE(w_testfield_i3b_bounds))
      
      w_testfield_i3c = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i3c))
      w_testfield_i3c_size = (/ 3, 1, 1 /)
      w_testfield_i3c_bounds = RESHAPE((/ 1, 1, 1, 3, 1, 1 /), SHAPE(w_testfield_i3c_bounds))
      
      w_testfield_i3d = RESHAPE((/ 109 /), SHAPE(w_testfield_i3d))
      w_testfield_i3d_size = (/ 1, 1, 1 /)
      w_testfield_i3d_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 1 /), SHAPE(w_testfield_i3d_bounds))
      
      w_testfield_i3e = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i3e))
      w_testfield_i3e_size = (/ 1, 1, 3 /)
      w_testfield_i3e_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 3 /), SHAPE(w_testfield_i3e_bounds))
      
      w_testfield_i3f = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3f))
      w_testfield_i3f_size = (/ 1, 4, 3 /)
      w_testfield_i3f_bounds = RESHAPE((/ 1, 1, 1, 1, 4, 3 /), SHAPE(w_testfield_i3f_bounds))
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i3a_rank", w_testfield_i3a)
      CALL fs_write_field(serializer, savepoint, "testfield_i3b_rank", w_testfield_i3b)
      CALL fs_write_field(serializer, savepoint, "testfield_i3c_rank", w_testfield_i3c)
      CALL fs_write_field(serializer, savepoint, "testfield_i3d_rank", w_testfield_i3d)
      CALL fs_write_field(serializer, savepoint, "testfield_i3e_rank", w_testfield_i3e)
      CALL fs_write_field(serializer, savepoint, "testfield_i3f_rank", w_testfield_i3f)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)

      @assertTrue(fs_field_exists(serializer, "testfield_i3a_rank"))
      !@assertEqual(w_testfield_i3a_size, fs_get_field_size(serializer, "testfield_i3a_rank"))
      !@assertEqual(w_testfield_i3a_bounds, fs_get_field_bounds(serializer, "testfield_i3a_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i3b_rank"))
      !@assertEqual(w_testfield_i3b_size, fs_get_field_size(serializer, "testfield_i3b_rank"))
      !@assertEqual(w_testfield_i3b_bounds, fs_get_field_bounds(serializer, "testfield_i3b_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i3c_rank"))
      !@assertEqual(w_testfield_i3c_size, fs_get_field_size(serializer, "testfield_i3c_rank"))
      !@assertEqual(w_testfield_i3c_bounds, fs_get_field_bounds(serializer, "testfield_i3c_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i3d_rank"))
      !@assertEqual(w_testfield_i3d_size, fs_get_field_size(serializer, "testfield_i3d_rank"))
      !@assertEqual(w_testfield_i3d_bounds, fs_get_field_bounds(serializer, "testfield_i3d_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i3e_rank"))
      !@assertEqual(w_testfield_i3e_size, fs_get_field_size(serializer, "testfield_i3e_rank"))
      !@assertEqual(w_testfield_i3e_bounds, fs_get_field_bounds(serializer, "testfield_i3e_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i3f_rank"))
      !@assertEqual(w_testfield_i3f_size, fs_get_field_size(serializer, "testfield_i3f_rank"))
      !@assertEqual(w_testfield_i3f_bounds, fs_get_field_bounds(serializer, "testfield_i3f_rank"))

      CALL fs_read_field(serializer, savepoint, "testfield_i3a_rank", r_testfield_i3a)
      CALL fs_read_field(serializer, savepoint, "testfield_i3b_rank", r_testfield_i3b)
      CALL fs_read_field(serializer, savepoint, "testfield_i3c_rank", r_testfield_i3c)
      CALL fs_read_field(serializer, savepoint, "testfield_i3d_rank", r_testfield_i3d)
      CALL fs_read_field(serializer, savepoint, "testfield_i3e_rank", r_testfield_i3e)
      CALL fs_read_field(serializer, savepoint, "testfield_i3f_rank", r_testfield_i3f)

      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i3a, r_testfield_i3a)
      @assertEqual(w_testfield_i3b, r_testfield_i3b)
      @assertEqual(w_testfield_i3c, r_testfield_i3c)
      @assertEqual(w_testfield_i3d, r_testfield_i3d)
      @assertEqual(w_testfield_i3e, r_testfield_i3e)
      @assertEqual(w_testfield_i3f, r_testfield_i3f)
    
    END SUBROUTINE testRank_i3
   
@Test
    SUBROUTINE testRank_i4()
    
      TYPE(t_serializer) :: serializer
      
      INTEGER :: w_testfield_i4a(3,1,1,4), r_testfield_i4a(3,1,1,4), w_testfield_i4a_size(4), w_testfield_i4a_bounds(4, 2)
      INTEGER :: w_testfield_i4b(3,2,2,1), r_testfield_i4b(3,2,2,1), w_testfield_i4b_size(4), w_testfield_i4b_bounds(4, 2)
      INTEGER :: w_testfield_i4c(3,2,1,1), r_testfield_i4c(3,2,1,1), w_testfield_i4c_size(4), w_testfield_i4c_bounds(4, 2)
      INTEGER :: w_testfield_i4d(3,1,1,1), r_testfield_i4d(3,1,1,1), w_testfield_i4d_size(4), w_testfield_i4d_bounds(4, 2)
      INTEGER :: w_testfield_i4e(1,1,1,1), r_testfield_i4e(1,1,1,1), w_testfield_i4e_size(4), w_testfield_i4e_bounds(4, 2)
      INTEGER :: w_testfield_i4f(1,1,1,3), r_testfield_i4f(1,1,1,3), w_testfield_i4f_size(4), w_testfield_i4f_bounds(4, 2)
      INTEGER :: w_testfield_i4g(1,1,2,3), r_testfield_i4g(1,1,2,3), w_testfield_i4g_size(4), w_testfield_i4g_bounds(4, 2)
      INTEGER :: w_testfield_i4h(1,3,2,2), r_testfield_i4h(1,3,2,2), w_testfield_i4h_size(4), w_testfield_i4h_bounds(4, 2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank'
      
      w_testfield_i4a = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i4a))
      w_testfield_i4a_size = (/ 3, 1, 1, 4 /)
      w_testfield_i4a_bounds = RESHAPE((/ 1, 1, 1, 1, 3, 1, 1, 4 /), SHAPE(w_testfield_i4a_bounds))
      
      w_testfield_i4b = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i4b))
      w_testfield_i4b_size = (/ 3, 2, 2, 1 /)
      w_testfield_i4b_bounds = RESHAPE((/ 1, 1, 1, 1, 3, 2, 2, 1 /), SHAPE(w_testfield_i4b_bounds))
      
      w_testfield_i4c = RESHAPE((/ 0, 4, 8, 1, 5, 9 /), SHAPE(w_testfield_i4c))
      w_testfield_i4c_size = (/ 3, 2, 1, 1 /)
      w_testfield_i4c_bounds = RESHAPE((/ 1, 1, 1, 1, 3, 2, 1, 1 /), SHAPE(w_testfield_i4c_bounds))
      
      w_testfield_i4d = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4d))
      w_testfield_i4d_size = (/ 3, 1, 1, 1 /)
      w_testfield_i4d_bounds = RESHAPE((/ 1, 1, 1, 1, 3, 1, 1, 1 /), SHAPE(w_testfield_i4d_bounds))
      
      w_testfield_i4e = RESHAPE((/ 42 /), SHAPE(w_testfield_i4e))
      w_testfield_i4e_size = (/ 1, 1, 1, 1 /)
      w_testfield_i4e_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 1, 1, 1 /), SHAPE(w_testfield_i4e_bounds))
      
      w_testfield_i4f = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4f))
      w_testfield_i4f_size = (/ 1, 1, 1, 3 /)
      w_testfield_i4f_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 1, 1, 3 /), SHAPE(w_testfield_i4f_bounds))
      
      w_testfield_i4g = RESHAPE((/ 0, 4, 8, 1, 5, 9 /), SHAPE(w_testfield_i4g))
      w_testfield_i4g_size = (/ 1, 1, 2, 3 /)
      w_testfield_i4g_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 1, 2, 3 /), SHAPE(w_testfield_i4g_bounds))
      
      w_testfield_i4h = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4h))
      w_testfield_i4h_size = (/ 1, 3, 2, 2 /)
      w_testfield_i4h_bounds = RESHAPE((/ 1, 1, 1, 1, 1, 3, 2, 2 /), SHAPE(w_testfield_i4h_bounds))
      
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i4a_rank", w_testfield_i4a)
      CALL fs_write_field(serializer, savepoint, "testfield_i4b_rank", w_testfield_i4b)
      CALL fs_write_field(serializer, savepoint, "testfield_i4c_rank", w_testfield_i4c)
      CALL fs_write_field(serializer, savepoint, "testfield_i4d_rank", w_testfield_i4d)
      CALL fs_write_field(serializer, savepoint, "testfield_i4e_rank", w_testfield_i4e)
      CALL fs_write_field(serializer, savepoint, "testfield_i4f_rank", w_testfield_i4f)
      CALL fs_write_field(serializer, savepoint, "testfield_i4g_rank", w_testfield_i4g)
      CALL fs_write_field(serializer, savepoint, "testfield_i4h_rank", w_testfield_i4h)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)

      @assertTrue(fs_field_exists(serializer, "testfield_i4a_rank"))
      !@assertEqual(w_testfield_i4a_size, fs_get_field_size(serializer, "testfield_i4a_rank"))
      !@assertEqual(w_testfield_i4a_bounds, fs_get_field_bounds(serializer, "testfield_i4a_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4b_rank"))
      !@assertEqual(w_testfield_i4b_size, fs_get_field_size(serializer, "testfield_i4b_rank"))
      !@assertEqual(w_testfield_i4b_bounds, fs_get_field_bounds(serializer, "testfield_i4b_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4c_rank"))
      !@assertEqual(w_testfield_i4c_size, fs_get_field_size(serializer, "testfield_i4c_rank"))
      !@assertEqual(w_testfield_i4c_bounds, fs_get_field_bounds(serializer, "testfield_i4c_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4d_rank"))
      !@assertEqual(w_testfield_i4d_size, fs_get_field_size(serializer, "testfield_i4d_rank"))
      !@assertEqual(w_testfield_i4d_bounds, fs_get_field_bounds(serializer, "testfield_i4d_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4e_rank"))
      !@assertEqual(w_testfield_i4e_size, fs_get_field_size(serializer, "testfield_i4e_rank"))
      !@assertEqual(w_testfield_i4e_bounds, fs_get_field_bounds(serializer, "testfield_i4e_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4f_rank"))
      !@assertEqual(w_testfield_i4f_size, fs_get_field_size(serializer, "testfield_i4f_rank"))
      !@assertEqual(w_testfield_i4f_bounds, fs_get_field_bounds(serializer, "testfield_i4f_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4g_rank"))
      !@assertEqual(w_testfield_i4g_size, fs_get_field_size(serializer, "testfield_i4g_rank"))
      !@assertEqual(w_testfield_i4g_bounds, fs_get_field_bounds(serializer, "testfield_i4g_rank"))

      @assertTrue(fs_field_exists(serializer, "testfield_i4h_rank"))
      !@assertEqual(w_testfield_i4h_size, fs_get_field_size(serializer, "testfield_i4h_rank"))
      !@assertEqual(w_testfield_i4h_bounds, fs_get_field_bounds(serializer, "testfield_i4h_rank"))

      CALL fs_read_field(serializer, savepoint, "testfield_i4a_rank", r_testfield_i4a)
      CALL fs_read_field(serializer, savepoint, "testfield_i4b_rank", r_testfield_i4b)
      CALL fs_read_field(serializer, savepoint, "testfield_i4c_rank", r_testfield_i4c)
      CALL fs_read_field(serializer, savepoint, "testfield_i4d_rank", r_testfield_i4d)
      CALL fs_read_field(serializer, savepoint, "testfield_i4e_rank", r_testfield_i4e)
      CALL fs_read_field(serializer, savepoint, "testfield_i4f_rank", r_testfield_i4f)
      CALL fs_read_field(serializer, savepoint, "testfield_i4g_rank", r_testfield_i4g)
      CALL fs_read_field(serializer, savepoint, "testfield_i4h_rank", r_testfield_i4h)

      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i4a, r_testfield_i4a)
      @assertEqual(w_testfield_i4b, r_testfield_i4b)
      @assertEqual(w_testfield_i4c, r_testfield_i4c)
      @assertEqual(w_testfield_i4d, r_testfield_i4d)
      @assertEqual(w_testfield_i4e, r_testfield_i4e)
      @assertEqual(w_testfield_i4f, r_testfield_i4f)
      @assertEqual(w_testfield_i4g, r_testfield_i4g)
      @assertEqual(w_testfield_i4h, r_testfield_i4h)
    
    END SUBROUTINE testRank_i4

END MODULE serialbox_test


